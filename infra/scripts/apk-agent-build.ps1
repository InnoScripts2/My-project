# ====================================================================
# Фоновый агент: Стабилизация Gradle и сборка Android APK
# ====================================================================
# Назначение: Автоматизированная починка Gradle wrapper, настройка
#             окружения и сборка debug APK с сохранением артефактов
# ====================================================================

param(
    [string]$JavaHome = "C:\Program Files\Java\jdk-17",
    [string]$AndroidSdkRoot = "C:\Users\Alexsey\AppData\Local\Android\Sdk",
    [string]$ProjectDir = "$PSScriptRoot/../../apps/android-kiosk",
    [switch]$SkipBuild,
    [switch]$Verbose
)

$ErrorActionPreference = 'Stop'
if ($Verbose) { $VerbosePreference = 'Continue' }

# ====================================================================
# Функции
# ====================================================================

function Write-Step {
    param([string]$Message)
    Write-Host "`n==> $Message" -ForegroundColor Cyan
}

function Write-Success {
    param([string]$Message)
    Write-Host "  ✓ $Message" -ForegroundColor Green
}

function Write-Failure {
    param([string]$Message)
    Write-Host "  ✗ $Message" -ForegroundColor Red
}

function Test-JavaInstallation {
    param([string]$JavaPath)
    
    $javaExe = Join-Path $JavaPath "bin\java.exe"
    if (-not (Test-Path -LiteralPath $javaExe)) {
        return $false
    }
    
    try {
        $version = & $javaExe -version 2>&1 | Select-String "version" | Select-Object -First 1
        if ($version -match '"(\d+)') {
            $major = [int]$matches[1]
            return $major -ge 17
        }
    } catch {
        return $false
    }
    return $false
}

function Test-AndroidSdkInstallation {
    param([string]$SdkPath)
    
    $platformsDir = Join-Path $SdkPath "platforms"
    $buildToolsDir = Join-Path $SdkPath "build-tools"
    
    if (-not (Test-Path -LiteralPath $platformsDir)) { return $false }
    if (-not (Test-Path -LiteralPath $buildToolsDir)) { return $false }
    
    # Check for platform-34 and build-tools-34
    $platform34 = Get-ChildItem -Path $platformsDir -Directory | Where-Object { $_.Name -like "android-34*" } | Select-Object -First 1
    $buildTools34 = Get-ChildItem -Path $buildToolsDir -Directory | Where-Object { $_.Name -like "34.*" } | Select-Object -First 1
    
    return ($null -ne $platform34) -and ($null -ne $buildTools34)
}

# ====================================================================
# Шаг 1: Валидация окружения
# ====================================================================

Write-Step "Шаг 1: Валидация окружения"

# Проверка Java
if (-not (Test-JavaInstallation -JavaPath $JavaHome)) {
    Write-Failure "Java 17+ не найдена в $JavaHome"
    Write-Host "Установите JDK 17 или укажите корректный путь через -JavaHome" -ForegroundColor Yellow
    exit 1
}
Write-Success "Java найдена: $JavaHome"

# Проверка Android SDK
if (-not (Test-AndroidSdkInstallation -SdkPath $AndroidSdkRoot)) {
    Write-Failure "Android SDK не найден или неполный в $AndroidSdkRoot"
    Write-Host "Установите Android SDK с platforms;android-34 и build-tools;34.0.0" -ForegroundColor Yellow
    exit 1
}
Write-Success "Android SDK найден: $AndroidSdkRoot"

# Проверка директории проекта
$ProjectDir = (Resolve-Path $ProjectDir).Path
if (-not (Test-Path -LiteralPath (Join-Path $ProjectDir "settings.gradle"))) {
    Write-Failure "Не найден settings.gradle в $ProjectDir"
    exit 1
}
Write-Success "Проект найден: $ProjectDir"

# ====================================================================
# Шаг 2: Настройка переменных окружения
# ====================================================================

Write-Step "Шаг 2: Настройка переменных окружения"

$env:JAVA_HOME = $JavaHome
$env:ANDROID_SDK_ROOT = $AndroidSdkRoot
$env:ANDROID_HOME = $AndroidSdkRoot
$env:PATH = (Join-Path $JavaHome "bin") + ";" + $env:PATH
$env:JAVA_TOOL_OPTIONS = "-Dfile.encoding=UTF-8 -Dsun.jnu.encoding=UTF-8"

Write-Success "JAVA_HOME=$env:JAVA_HOME"
Write-Success "ANDROID_SDK_ROOT=$env:ANDROID_SDK_ROOT"
Write-Success "Кодировка UTF-8 установлена"

# ====================================================================
# Шаг 3: Создание/обновление local.properties
# ====================================================================

Write-Step "Шаг 3: Создание local.properties"

$localProps = Join-Path $ProjectDir "local.properties"
$sdkDirNormalized = $AndroidSdkRoot -replace '\\', '\\'
$localPropsContent = @"
## This file is automatically generated by Android tools.
# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
#
# Location of the SDK. This is only used by Gradle.
sdk.dir=$sdkDirNormalized
"@

Set-Content -LiteralPath $localProps -Value $localPropsContent -Encoding UTF8
Write-Success "local.properties создан/обновлён"

# ====================================================================
# Шаг 4: Создание/обновление gradle.properties
# ====================================================================

Write-Step "Шаг 4: Создание gradle.properties"

$gradleProps = Join-Path $ProjectDir "gradle.properties"
$gradlePropsContent = @"
# Gradle properties for Android Kiosk project
# UTF-8 encoding to handle non-ASCII paths and ensure compatibility
org.gradle.jvmargs=-Dfile.encoding=UTF-8 -Dsun.jnu.encoding=UTF-8 -Xmx2g
org.gradle.daemon=true

# Android build optimization
android.useAndroidX=true
android.enableJetifier=false
android.overridePathCheck=true
"@

Set-Content -LiteralPath $gradleProps -Value $gradlePropsContent -Encoding UTF8
Write-Success "gradle.properties создан/обновлён"

# ====================================================================
# Шаг 5: Регенерация Gradle wrapper
# ====================================================================

Write-Step "Шаг 5: Регенерация Gradle wrapper"

$wrapperJar = Join-Path $ProjectDir "gradle\wrapper\gradle-wrapper.jar"

# Попытка использовать установленный Gradle (если доступен)
$gradleCmd = Get-Command gradle -ErrorAction SilentlyContinue
if ($gradleCmd) {
    # Регенерируем wrapper только если он отсутствует или требуется восстановление
    $needRegen = -not (Test-Path -LiteralPath $wrapperJar)
    if (-not $needRegen) {
        Write-Host "  Найден существующий gradle-wrapper.jar — попытка валидации без регенерации..." -ForegroundColor Yellow
    }
    Write-Host "  Использование установленного Gradle для генерации wrapper..." -ForegroundColor Yellow
    Push-Location $ProjectDir
    try {
        if ($needRegen) {
            # Временно упрощаем конфигурацию для успешной генерации wrapper
            $settingsBak = Join-Path $ProjectDir "settings.gradle.bak"
            $buildBak = Join-Path $ProjectDir "build.gradle.bak"

            Copy-Item -LiteralPath (Join-Path $ProjectDir "settings.gradle") -Destination $settingsBak -Force
            Copy-Item -LiteralPath (Join-Path $ProjectDir "build.gradle") -Destination $buildBak -Force

            # Минимальная конфигурация для wrapper
            Set-Content -LiteralPath (Join-Path $ProjectDir "settings.gradle") -Value 'rootProject.name = "AndroidKiosk"' -Encoding UTF8
            Set-Content -LiteralPath (Join-Path $ProjectDir "build.gradle") -Value '' -Encoding UTF8

            # Генерация wrapper
            & gradle wrapper --gradle-version 8.7 --distribution-type bin 2>&1 | Out-Null

            # Восстановление оригинальных файлов
            Move-Item -LiteralPath $settingsBak -Destination (Join-Path $ProjectDir "settings.gradle") -Force
            Move-Item -LiteralPath $buildBak -Destination (Join-Path $ProjectDir "build.gradle") -Force

            if (Test-Path -LiteralPath $wrapperJar) {
                Write-Success "Gradle wrapper успешно сгенерирован"
            } else {
                throw "gradle-wrapper.jar не был создан"
            }
        } else {
            Write-Success "Используем существующий Gradle wrapper без регенерации"
        }
    } catch {
        Write-Failure "Ошибка генерации wrapper: $_"
        Pop-Location
        
        # Восстановление файлов в случае ошибки
        if (Test-Path -LiteralPath $settingsBak) { Move-Item -LiteralPath $settingsBak -Destination (Join-Path $ProjectDir "settings.gradle") -Force }
        if (Test-Path -LiteralPath $buildBak) { Move-Item -LiteralPath $buildBak -Destination (Join-Path $ProjectDir "build.gradle") -Force }
        
        Write-Host "`nРешение: Скачайте и установите Gradle вручную:" -ForegroundColor Yellow
        Write-Host "  - Chocolatey: choco install gradle" -ForegroundColor Yellow
        Write-Host "  - Scoop: scoop install gradle" -ForegroundColor Yellow
        Write-Host "  - Manual: https://gradle.org/releases/" -ForegroundColor Yellow
        exit 1
    } finally {
        Pop-Location
    }
} else {
    # Gradle не установлен — продолжаем только если wrapper уже существует
    if (Test-Path -LiteralPath $wrapperJar) {
        Write-Host "  Gradle в PATH не найден, но обнаружен существующий gradle-wrapper.jar — пропускаем регенерацию" -ForegroundColor Yellow
    } else {
        Write-Failure "Gradle не найден в PATH и отсутствует gradle-wrapper.jar"
        Write-Host "Установите Gradle или добавьте корректный wrapper в проект" -ForegroundColor Yellow
        exit 1
    }
}

# ====================================================================
# Шаг 6: Валидация wrapper
# ====================================================================

Write-Step "Шаг 6: Валидация wrapper"

Push-Location $ProjectDir
try {
    $gradlewBat = Join-Path $ProjectDir "gradlew.bat"
    if (-not (Test-Path -LiteralPath $gradlewBat)) {
        Write-Failure "gradlew.bat не найден"
        exit 1
    }
    
    Write-Host "  Проверка версии Gradle..." -ForegroundColor Yellow
    $output = & $gradlewBat --version 2>&1 | Out-String
    
    if ($output -match "Gradle 8\.7") {
        Write-Success "Wrapper работает корректно (Gradle 8.7)"
    } else {
        Write-Failure "Wrapper вернул неожиданную версию"
        Write-Host $output
        exit 1
    }
} catch {
    Write-Failure "Ошибка проверки wrapper: $_"
    exit 1
} finally {
    Pop-Location
}

# ====================================================================
# Шаг 7: Создание структуры artifacts
# ====================================================================

Write-Step "Шаг 7: Создание структуры artifacts"

$artifactsRoot = Join-Path $ProjectDir "..\..\apps\artifacts\android" | Resolve-Path -Relative
$artifactsRoot = Join-Path $PSScriptRoot "../../apps/artifacts/android" | Resolve-Path
$timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
$artifactsDir = Join-Path $artifactsRoot $timestamp

if (-not (Test-Path -LiteralPath $artifactsDir)) {
    New-Item -ItemType Directory -Path $artifactsDir -Force | Out-Null
}
Write-Success "Artifacts: $artifactsDir"

# ====================================================================
# Шаг 8: Сборка APK
# ====================================================================

if (-not $SkipBuild) {
    Write-Step "Шаг 8: Сборка debug APK"
    
    Push-Location $ProjectDir
    try {
        $buildLog = Join-Path $artifactsDir "build.log"
        
        Write-Host "  Запуск ./gradlew :app:assembleDebug..." -ForegroundColor Yellow
        Write-Host "  (Это может занять несколько минут при первой сборке...)" -ForegroundColor Yellow
        
        & $gradlewBat :app:assembleDebug --no-daemon --stacktrace 2>&1 | Tee-Object -FilePath $buildLog
        
        if ($LASTEXITCODE -eq 0) {
            Write-Success "Сборка завершена успешно"
            
            # Поиск APK
            $apkPath = Join-Path $ProjectDir "app\build\outputs\apk\debug\app-debug.apk"
            if (Test-Path -LiteralPath $apkPath) {
                # Копирование APK
                $destApk = Join-Path $artifactsDir "app-debug.apk"
                Copy-Item -LiteralPath $apkPath -Destination $destApk -Force
                
                # Генерация SHA256
                $hash = (Get-FileHash -LiteralPath $destApk -Algorithm SHA256).Hash
                Set-Content -LiteralPath "$destApk.sha256" -Value $hash -Encoding ASCII
                
                $apkSize = (Get-Item -LiteralPath $destApk).Length
                $apkSizeMb = [math]::Round($apkSize / 1MB, 2)
                
                Write-Success "APK: $destApk ($apkSizeMb MB)"
                Write-Success "SHA256: $hash"
            } else {
                Write-Failure "APK не найден в ожидаемом месте: $apkPath"
            }
        } else {
            Write-Failure "Сборка завершилась с ошибкой (код $LASTEXITCODE)"
            Write-Host "Смотрите лог: $buildLog" -ForegroundColor Yellow
            exit $LASTEXITCODE
        }
    } finally {
        Pop-Location
    }
} else {
    Write-Host "  Сборка пропущена (-SkipBuild)" -ForegroundColor Yellow
}

# ====================================================================
# Шаг 9: Финальная верификация
# ====================================================================

Write-Step "Шаг 9: Финальная верификация"

Push-Location $ProjectDir
try {
    Write-Host "  Проверка доступных задач..." -ForegroundColor Yellow
    & $gradlewBat :app:tasks --all 2>&1 | Out-Null
    
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Gradle tasks доступны"
    } else {
        Write-Failure "Ошибка при выполнении :app:tasks"
    }
} finally {
    Pop-Location
}

# ====================================================================
# Отчёт
# ====================================================================

Write-Host "`n╔════════════════════════════════════════════════════════════════╗" -ForegroundColor Green
Write-Host "║              ОТЧЁТ: Gradle wrapper и сборка APK                 ║" -ForegroundColor Green
Write-Host "╚════════════════════════════════════════════════════════════════╝" -ForegroundColor Green

Write-Host "`n[Окружение]" -ForegroundColor Cyan
Write-Host "  Java:    $env:JAVA_HOME"
Write-Host "  Gradle:  8.7 (wrapper)"
Write-Host "  AGP:     8.4.1"
Write-Host "  SDK:     $env:ANDROID_SDK_ROOT"

Write-Host "`n[Wrapper]" -ForegroundColor Cyan
Write-Host "  Статус:  ✓ Успешно сгенерирован"
Write-Host "  Версия:  Gradle 8.7"
Write-Host "  Jar:     $(Join-Path $ProjectDir 'gradle\wrapper\gradle-wrapper.jar')"

if (-not $SkipBuild) {
    Write-Host "`n[APK]" -ForegroundColor Cyan
    $apkPath = Join-Path $artifactsDir "app-debug.apk"
    if (Test-Path -LiteralPath $apkPath) {
        $apkSize = (Get-Item -LiteralPath $apkPath).Length
        $apkSizeMb = [math]::Round($apkSize / 1MB, 2)
        $hash = Get-Content -LiteralPath "$apkPath.sha256" -Raw
        
        Write-Host "  Путь:    $apkPath"
        Write-Host "  Размер:  $apkSizeMb MB"
        Write-Host "  SHA256:  $hash"
        Write-Host "  Лог:     $(Join-Path $artifactsDir 'build.log')"
    } else {
        Write-Host "  Статус:  APK не найден (возможно, ошибка сборки)" -ForegroundColor Yellow
    }
}

Write-Host "`n[Рекомендации]" -ForegroundColor Cyan
Write-Host "  1. При проблемах с Unicode-путями используйте junction:"
Write-Host "     mklink /J C:\work\android-kiosk $(Resolve-Path $ProjectDir)"
Write-Host "  2. Для повторной сборки запустите:"
Write-Host "     cd $ProjectDir"
Write-Host "     .\gradlew :app:assembleDebug"
Write-Host "  3. Артефакты сохранены в: apps/artifacts/android/$timestamp/"

Write-Host "`n✓ Выполнение завершено" -ForegroundColor Green
