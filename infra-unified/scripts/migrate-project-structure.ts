import { promises as fs } from 'fs';
import * as path from 'path';

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –µ–¥–∏–Ω—É—é
 */

const PROJECT_ROOT = process.cwd();

const MIGRATION_MAP = {
  // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  'apps-unified/kiosk-agent': '03-apps/02-application/kiosk-agent',
  'apps-unified/kiosk-frontend': 'index.html', // –û—Å–Ω–æ–≤–Ω–æ–π HTML —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ
  'apps-unified/cloud-api': '03-apps/02-application/cloud-api',
  'apps-unified/kiosk-admin': 'apps/kiosk-admin',
  'apps-unified/android-kiosk': 'apps/android-kiosk',
  
  // –ü–∞–∫–µ—Ç—ã
  'packages-unified/obd-diagnostics': 'apps-unified/kiosk-agent/src/devices/obd',
  'packages-unified/shared-types': '–Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ–±—â–∏—Ö —Ç–∏–ø–æ–≤',
  'packages-unified/payment-core': 'apps-unified/kiosk-agent/src/payments',
  'packages-unified/report-generator': 'apps-unified/kiosk-agent/src/reports',
  
  // –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
  'infra-unified/scripts': '06-infra/04-infrastructure/infra-root/scripts',
  'infra-unified/docker': '–Ω–æ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è Docker',
  'infra-unified/deployment': 'infra',

  // –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
  'docs-unified/api': '09-docs',
  'docs-unified/architecture': 'docs',
  'docs-unified/guides': 'docs',
};

async function copyDirectory(src: string, dest: string): Promise<void> {
  try {
    await fs.mkdir(dest, { recursive: true });
    const entries = await fs.readdir(src, { withFileTypes: true });
    
    for (const entry of entries) {
      const srcPath = path.join(src, entry.name);
      const destPath = path.join(dest, entry.name);
      
      if (entry.isDirectory()) {
        await copyDirectory(srcPath, destPath);
      } else {
        await fs.copyFile(srcPath, destPath);
      }
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ${src} -> ${dest}:`, error);
  }
}

async function migrateProjectStructure(): Promise<void> {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞...');
  
  // 1. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø–∞–ø–∫–∏
  const newDirs = [
    'apps-unified',
    'packages-unified', 
    'infra-unified',
    'docs-unified',
    'tests-unified',
    'tools-unified',
    'config-unified'
  ];
  
  for (const dir of newDirs) {
    await fs.mkdir(path.join(PROJECT_ROOT, dir), { recursive: true });
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${dir}`);
  }
  
  // 2. –ö–æ–ø–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  const migrations = [
    // –£–∂–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: kiosk-agent
    {
      src: path.join(PROJECT_ROOT, 'apps', 'kiosk-admin'),
      dest: path.join(PROJECT_ROOT, 'apps-unified', 'kiosk-admin')
    },
    {
      src: path.join(PROJECT_ROOT, 'apps', 'android-kiosk'),
      dest: path.join(PROJECT_ROOT, 'apps-unified', 'android-kiosk')
    },
    {
      src: path.join(PROJECT_ROOT, '06-infra', '04-infrastructure', 'infra-root', 'scripts'),
      dest: path.join(PROJECT_ROOT, 'infra-unified', 'scripts')
    },
    {
      src: path.join(PROJECT_ROOT, 'docs'),
      dest: path.join(PROJECT_ROOT, 'docs-unified', 'legacy')
    }
  ];
  
  for (const migration of migrations) {
    try {
      await copyDirectory(migration.src, migration.dest);
      console.log(`‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: ${migration.src} -> ${migration.dest}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ –Ω–∞–π–¥–µ–Ω–æ): ${migration.src}`);
    }
  }
  
  // 3. –ò–∑–≤–ª–µ–∫–∞–µ–º OBD —Å–∏—Å—Ç–µ–º—É –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç
  const obdSrc = path.join(PROJECT_ROOT, 'apps-unified', 'kiosk-agent', 'src', 'devices', 'obd');
  const obdDest = path.join(PROJECT_ROOT, 'packages-unified', 'obd-diagnostics');
  
  try {
    await copyDirectory(obdSrc, path.join(obdDest, 'src'));
    
    // –°–æ–∑–¥–∞–µ–º package.json –¥–ª—è OBD –ø–∞–∫–µ—Ç–∞
    const obdPackageJson = {
      name: '@selfservice/obd-diagnostics',
      version: '1.0.0',
      description: 'OBD-II –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∫–∏–æ—Å–∫–∞ —Å–∞–º–æ–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è',
      type: 'module',
      main: 'dist/index.js',
      types: 'dist/index.d.ts',
      scripts: {
        build: 'tsc',
        test: 'node --test',
        'test:integration': 'node --test **/*.integration.test.ts'
      }
    };
    
    await fs.writeFile(
      path.join(obdDest, 'package.json'),
      JSON.stringify(obdPackageJson, null, 2)
    );
    
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω –ø–∞–∫–µ—Ç: @selfservice/obd-diagnostics');
  } catch (error) {
    console.log('‚ö†Ô∏è  OBD —Å–∏—Å—Ç–µ–º–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
  }
  
  // 4. –°–æ–∑–¥–∞–µ–º index.ts —Ñ–∞–π–ª—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
  const indexFiles = [
    {
      path: path.join(PROJECT_ROOT, 'packages-unified', 'obd-diagnostics', 'src', 'index.ts'),
      content: `// –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ OBD-II —Å–∏—Å—Ç–µ–º—ã
export * from './database/ObdTypes';
export * from './database/DtcDatabase';
export * from './database/PidDatabase';
export * from './driver/Elm327Driver';
export * from './ObdConnectionManager';
export * from './Transport';
`
    },
    {
      path: path.join(PROJECT_ROOT, 'apps-unified', 'kiosk-agent', 'src', 'index.ts'),
      content: `// –ì–ª–∞–≤–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç kiosk-agent
export * from './server';
export * from './api/routes';
`
    }
  ];
  
  for (const indexFile of indexFiles) {
    await fs.mkdir(path.dirname(indexFile.path), { recursive: true });
    await fs.writeFile(indexFile.path, indexFile.content);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω index.ts: ${path.relative(PROJECT_ROOT, indexFile.path)}`);
  }
  
  console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

async function updatePackageJsonReferences(): Promise<void> {
  console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º package.json —Å—Å—ã–ª–∫–∏...');
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π package.json
  const rootPackageJsonPath = path.join(PROJECT_ROOT, 'package-unified.json');
  
  try {
    const packageJson = JSON.parse(await fs.readFile(rootPackageJsonPath, 'utf-8'));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º workspace –ø—É—Ç–∏
    packageJson.workspaces = [
      'apps-unified/*',
      'packages-unified/*'
    ];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã
    const newScripts = {
      ...packageJson.scripts,
      'dev:agent': 'npm run dev --workspace=apps-unified/kiosk-agent',
      'dev:frontend': 'npm run dev --workspace=apps-unified/kiosk-frontend', 
      'dev:cloud': 'npm run dev --workspace=apps-unified/cloud-api',
      'build:agent': 'npm run build --workspace=apps-unified/kiosk-agent',
      'test:obd': 'npm run test --workspace=packages-unified/obd-diagnostics',
    };
    
    packageJson.scripts = newScripts;
    
    await fs.writeFile(rootPackageJsonPath, JSON.stringify(packageJson, null, 2));
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω package-unified.json');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è package.json:', error);
  }
}

async function generateMigrationReport(): Promise<void> {
  const report = `# –û—Ç—á–µ—Ç –æ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞

## –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

### ‚úÖ –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞
- \`apps-unified/\` - –í—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –µ–¥–∏–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
- \`packages-unified/\` - –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–∞–∫–µ—Ç—ã
- \`infra-unified/\` - –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
- \`docs-unified/\` - –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

### ‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã
- \`apps-unified/kiosk-agent/\` - Backend —Å–µ—Ä–≤–∏—Å
- \`apps-unified/kiosk-admin/\` - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
- \`apps-unified/android-kiosk/\` - Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

### ‚úÖ –ü–∞–∫–µ—Ç—ã –≤—ã–¥–µ–ª–µ–Ω—ã
- \`packages-unified/obd-diagnostics/\` - OBD-II —Å–∏—Å—Ç–µ–º–∞
- –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–µ–ª–µ–Ω–∏—é: payment-core, report-generator

### ‚úÖ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
- \`infra-unified/scripts/\` - –°–∫—Ä–∏–ø—Ç—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: \`npm install\`
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–±–æ—Ä–∫—É: \`npm run build\`
3. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã: \`npm test\`
4. –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—Ç–∞—Ä—ã–π package.json: \`mv package-unified.json package.json\`
5. –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ø–∞–ø–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏

## –ö–æ–º–∞–Ω–¥—ã

\`\`\`bash
# –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞
npm run dev          # –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã
npm run dev:agent    # –¢–æ–ª—å–∫–æ backend
npm run dev:frontend # –¢–æ–ª—å–∫–æ frontend

# –°–±–æ—Ä–∫–∞
npm run build        # –í—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
npm run build:agent  # –¢–æ–ª—å–∫–æ backend

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
npm test            # –í—Å–µ —Ç–µ—Å—Ç—ã
npm run test:obd    # –¢–æ–ª—å–∫–æ OBD —Ç–µ—Å—Ç—ã
\`\`\`

–î–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: ${new Date().toISOString()}
`;

  await fs.writeFile(path.join(PROJECT_ROOT, 'MIGRATION-REPORT.md'), report);
  console.log('üìã –°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç –æ –º–∏–≥—Ä–∞—Ü–∏–∏: MIGRATION-REPORT.md');
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
async function main(): Promise<void> {
  try {
    await migrateProjectStructure();
    await updatePackageJsonReferences();
    await generateMigrationReport();
    
    console.log('\nüéØ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìÅ –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
    console.log('üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ MIGRATION-REPORT.md –¥–ª—è –¥–µ—Ç–∞–ª–µ–π');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    process.exit(1);
  }
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}