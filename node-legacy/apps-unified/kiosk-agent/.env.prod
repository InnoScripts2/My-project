# Production Environment Configuration for Kiosk Agent
# OBD-II Diagnostics System

# ============================================================================
# ENVIRONMENT
# ============================================================================
AGENT_ENV=PROD
NODE_ENV=production

# ============================================================================
# OBD CONNECTION
# ============================================================================

# Maximum number of connection retry attempts
OBD_CONNECTION_RETRIES=3

# Connection timeout in milliseconds
OBD_CONNECTION_TIMEOUT=15000

# Interval between retry attempts in milliseconds
OBD_RETRY_INTERVAL=5000

# Enable auto-detection of adapter
OBD_AUTO_DETECT=true

# Device name pattern for Bluetooth discovery
# Leave empty for auto-detect, or specify: "KINGBOLEN"
OBD_DEVICE_NAME=

# Enable CAN FD support (if adapter supports it)
OBD_CAN_FD=true

# ============================================================================
# OBD SCANNING
# ============================================================================

# Maximum scan duration in milliseconds
OBD_SCAN_DURATION=60000

# Polling interval for PIDs in milliseconds
OBD_POLLING_INTERVAL=1000

# Collect vendor-specific diagnostic data (Toyota/Lexus)
OBD_COLLECT_VENDOR_DATA=true

# Include DTC codes in scan
OBD_INCLUDE_DTC=true

# Include PID data in scan
OBD_INCLUDE_PIDS=true

# Include VIN reading in scan
OBD_INCLUDE_VIN=true

# ============================================================================
# PAYMENT
# ============================================================================

# Payment amount in kopecks (480 RUB = 48000)
OBD_PAYMENT_AMOUNT=48000

# Payment timeout in milliseconds (5 minutes)
OBD_PAYMENT_TIMEOUT=300000

# Payment status polling interval in milliseconds
OBD_PAYMENT_POLL_INTERVAL=2000

# Payment currency
OBD_PAYMENT_CURRENCY=RUB

# ============================================================================
# REPORTING
# ============================================================================

# PDF engine: "puppeteer" (recommended), "pdfkit", or "html"
OBD_PDF_ENGINE=puppeteer

# Path to report templates directory
OBD_TEMPLATES_PATH=/opt/kiosk-agent/templates

# Path to generated reports output directory
OBD_REPORTS_PATH=/opt/kiosk-agent/reports

# Report retention period in days (after which reports are deleted)
OBD_REPORT_RETENTION_DAYS=30

# Report delivery retry attempts
OBD_DELIVERY_RETRY_ATTEMPTS=3

# Report delivery retry delay in milliseconds
OBD_DELIVERY_RETRY_DELAY=5000

# ============================================================================
# LOCKS
# ============================================================================

# Timeout for unlock operation in milliseconds
OBD_LOCK_UNLOCK_TIMEOUT=30000

# Timeout for waiting adapter return in milliseconds (5 minutes)
OBD_LOCK_WAIT_RETURN_TIMEOUT=300000

# Auto-close timeout for dispensed adapter in milliseconds (5 minutes)
OBD_LOCK_AUTO_CLOSE_TIMEOUT=300000

# ============================================================================
# MONITORING
# ============================================================================

# Enable Prometheus metrics endpoint
PROMETHEUS_ENABLED=true

# Metrics endpoint port (default: same as agent port)
PROMETHEUS_PORT=4099

# Metrics endpoint path
PROMETHEUS_PATH=/metrics

# ============================================================================
# LOGGING
# ============================================================================

# Log level: "error", "warn", "info", "debug"
LOG_LEVEL=info

# Log output: "console", "file", or "both"
LOG_OUTPUT=both

# Log file path
LOG_FILE_PATH=/var/log/kiosk-agent/agent.log

# Log rotation: size in MB
LOG_MAX_SIZE=100

# Log rotation: number of files to keep
LOG_MAX_FILES=10

# ============================================================================
# ERROR TRACKING
# ============================================================================

# Sentry DSN for error tracking (leave empty to disable)
SENTRY_DSN=

# Sentry environment tag
SENTRY_ENVIRONMENT=production

# Sentry release version (auto-detected if not set)
SENTRY_RELEASE=

# ============================================================================
# EMAIL DELIVERY
# ============================================================================

# Email provider: "sendgrid", "smtp", "mailgun"
EMAIL_PROVIDER=sendgrid

# SendGrid API key (if using SendGrid)
SENDGRID_API_KEY=

# SendGrid from email
SENDGRID_FROM_EMAIL=noreply@example.com

# SMTP configuration (if using SMTP)
SMTP_HOST=
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=
SMTP_PASSWORD=

# ============================================================================
# SMS DELIVERY
# ============================================================================

# SMS provider: "twilio", "nexmo"
SMS_PROVIDER=twilio

# Twilio configuration
TWILIO_ACCOUNT_SID=
TWILIO_AUTH_TOKEN=
TWILIO_FROM_NUMBER=

# ============================================================================
# DEV MODE (MUST BE DISABLED IN PRODUCTION)
# ============================================================================

# Enable mock OBD adapter (MUST BE false IN PROD)
OBD_MOCK_ENABLED=false

# Skip payment requirement (MUST BE false IN PROD)
OBD_SKIP_PAYMENT=false

# Mock scenario for testing (MUST BE empty IN PROD)
OBD_MOCK_SCENARIO=

# Auto-complete adapter return (MUST BE false IN PROD)
OBD_AUTO_COMPLETE_ADAPTER=false

# Use reduced timeouts for testing (MUST BE false IN PROD)
OBD_REDUCED_TIMEOUTS=false

# ============================================================================
# SECURITY
# ============================================================================

# Session secret for signing (generate with: openssl rand -base64 32)
SESSION_SECRET=

# API rate limit (requests per minute)
API_RATE_LIMIT=60

# Enable CORS
CORS_ENABLED=false

# CORS allowed origins (comma-separated)
CORS_ORIGINS=

# ============================================================================
# IMAGE OPTIMIZATION (IMGPROXY)
# ============================================================================

# imgproxy service URL
IMGPROXY_URL=http://localhost:8080

# imgproxy signature key (hex-encoded, generate with: xxd -g 2 -l 64 -p /dev/random | tr -d '\n')
IMGPROXY_KEY=

# imgproxy signature salt (hex-encoded, generate with: xxd -g 2 -l 64 -p /dev/random | tr -d '\n')
IMGPROXY_SALT=

# Enable automatic image optimization in reports
OPTIMIZE_IMAGES=true

# Cache backend: redis, filesystem, memory (default: memory)
CACHE_BACKEND=redis

# Redis URL for cache (if CACHE_BACKEND=redis)
REDIS_URL=redis://localhost:6379

# Cache TTL in seconds (default: 86400 = 24 hours)
CACHE_TTL=86400

# Maximum cache size in bytes (default: 104857600 = 100MB)
MAX_CACHE_SIZE=104857600

# Use filesystem cache (if CACHE_BACKEND not redis)
CACHE_FILESYSTEM=false

# ============================================================================
# DATABASE
# ============================================================================

# SQLite database path
SQLITE_DB_PATH=/opt/kiosk-agent/data/kiosk.db

# Database connection pool size
DB_POOL_SIZE=10

# ============================================================================
# ANALYTICS
# ============================================================================

# Enable analytics module
ANALYTICS_ENABLED=true

# DuckDB database path for analytics
DUCKDB_PATH=/opt/kiosk-agent/data/analytics.duckdb

# Analytics memory limit (default: 4GB)
ANALYTICS_MEMORY_LIMIT=4GB

# Daily aggregation cron schedule (default: 2 AM daily)
AGGREGATION_CRON=0 2 * * *

# Weekly report cron schedule (default: 3 AM Monday)
WEEKLY_REPORT_CRON=0 3 * * 1

# Export directory for analytics files
EXPORT_DIR=/opt/kiosk-agent/exports

# Aggregations directory for daily/weekly reports
AGGREGATION_DIR=/opt/kiosk-agent/data/aggregations

# Export cleanup: days to keep (default: 7)
EXPORT_CLEANUP_DAYS=7

# ============================================================================
# DEPLOYMENT NOTES
# ============================================================================

# 1. Copy this file to production environment
# 2. Fill in all required secrets and credentials
# 3. Validate configuration: npm run config:validate
# 4. Test in staging environment first
# 5. Deploy to production: npm ci --production && npm run build && npm start
# 6. Verify health check: curl http://localhost:4099/api/obd/health
# 7. Check metrics: curl http://localhost:4099/metrics
# 8. Configure Prometheus scraping
# 9. Configure Alertmanager notifications
# 10. Monitor logs and metrics for first 24 hours

# ============================================================================
# SUPPORT
# ============================================================================

# Production support contact: support@example.com
# Emergency on-call: +7-XXX-XXX-XXXX
# Monitoring dashboard: https://grafana.example.com/dashboards/obd
