/**
 * Example: Archive report after generation
 * 
 * This example shows how to automatically archive reports to Seafile
 * after they are generated by the ReportService.
 */

import { ReportService, ReportType } from '../reports/service.js'
import { ArchiveService } from '../file-transfer/ArchiveService.js'
import { SeafileClient } from '../file-transfer/SeafileClient.js'

async function archiveReportExample() {
  // Initialize services
  const reportService = new ReportService()
  const seafileClient = new SeafileClient()
  
  // Initialize Seafile connection
  await seafileClient.init(
    process.env.SEAFILE_SERVER_URL!,
    process.env.SEAFILE_USERNAME!,
    process.env.SEAFILE_PASSWORD!,
    process.env.SEAFILE_LIBRARY_ID!
  )
  
  const archiveService = new ArchiveService(seafileClient, reportService)
  
  // Generate a diagnostic report
  const report = await reportService.generateReport(
    'session-123',
    ReportType.DIAGNOSTICS,
    {
      sessionId: 'session-123',
      timestamp: new Date().toISOString(),
      dtcCodes: [
        { code: 'P0301', description: 'Cylinder 1 Misfire Detected' }
      ],
      // ... other data
    } as any
  )
  
  console.log('Report generated:', report.reportId)
  
  // Archive the report with share link
  const archiveResult = await archiveService.archiveReport(report.reportId, true)
  
  console.log('Report archived:', archiveResult.remotePath)
  console.log('Share link:', archiveResult.shareLink)
  
  // List archived reports
  const archived = await archiveService.listArchivedReports({
    type: 'DIAGNOSTICS',
    limit: 10
  })
  
  console.log(`Found ${archived.total} archived reports`)
  archived.reports.forEach(r => {
    console.log(`- ${r.reportId}: ${r.remotePath} (${r.size} bytes)`)
  })
}

/**
 * Example: Schedule automatic synchronization
 */
async function scheduleSyncExample() {
  const archiveService = new ArchiveService()
  
  // Schedule sync every day at 4 AM
  archiveService.scheduleSync('0 4 * * *')
  
  console.log('Sync scheduled')
  
  // Trigger manual sync
  const syncResult = await archiveService.manualSync()
  
  console.log('Sync completed:')
  console.log(`- Uploaded: ${syncResult.uploaded} files`)
  console.log(`- Duration: ${syncResult.duration}ms`)
  console.log(`- Errors: ${syncResult.errors.length}`)
}

/**
 * Example: Apply retention policy
 */
async function retentionPolicyExample() {
  const { RetentionPolicy } = await import('../file-transfer/RetentionPolicy.js')
  
  const policy = new RetentionPolicy()
  
  // Configure policy
  policy.configurePolicy({
    localRetentionDays: 7,
    remoteRetentionDays: 90,
    autoDeleteAfterSync: true,
    exemptPatterns: ['/important-.*\\.pdf$']
  })
  
  // Apply policy
  const result = await policy.applyPolicy()
  
  console.log('Retention policy applied:')
  console.log(`- Local deleted: ${result.localDeleted} files`)
  console.log(`- Remote deleted: ${result.remoteDeleted} files`)
  console.log(`- Errors: ${result.errors.length}`)
}

/**
 * Example: REST API usage
 */
async function apiExample() {
  // Archive a report
  const archiveResponse = await fetch('http://localhost:7070/api/reports/report-123/archive', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ shareLink: true })
  })
  
  const archiveData = await archiveResponse.json()
  console.log('Archived:', archiveData)
  
  // List archived reports
  const listResponse = await fetch('http://localhost:7070/api/reports/archived?type=DIAGNOSTICS&limit=10')
  const listData = await listResponse.json()
  console.log('Archived reports:', listData.reports)
  
  // Trigger manual sync
  const syncResponse = await fetch('http://localhost:7070/api/reports/sync', {
    method: 'POST'
  })
  
  const syncData = await syncResponse.json()
  console.log('Sync started:', syncData.syncId)
  
  // Check sync status
  const statusResponse = await fetch(`http://localhost:7070/api/reports/sync/${syncData.syncId}`)
  const statusData = await statusResponse.json()
  console.log('Sync status:', statusData.status)
}

// Run examples (commented out - uncomment to test)
// archiveReportExample().catch(console.error)
// scheduleSyncExample().catch(console.error)
// retentionPolicyExample().catch(console.error)
// apiExample().catch(console.error)

export {
  archiveReportExample,
  scheduleSyncExample,
  retentionPolicyExample,
  apiExample
}
