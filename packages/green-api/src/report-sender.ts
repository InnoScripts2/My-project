/**
 * Report Sender
 * –ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤ —á–µ—Ä–µ–∑ Green API
 */

import { GreenApiClient } from './client.js';
import type { GreenApiConfig, ApiResponse } from './types.js';

export interface DiagnosticReport {
  timestamp: string;
  vehicleId?: string;
  vin?: string;
  diagnosticCodes?: string[];
  sensors?: Record<string, any>;
  summary: string;
}

export interface ReportConfig {
  recipientPhone: string; // –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79XXXXXXXXX@c.us
  includeDetails?: boolean;
  sendAsFile?: boolean;
}

export class ReportSender {
  private client: GreenApiClient;

  constructor(config: GreenApiConfig) {
    this.client = new GreenApiClient(config);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á—ë—Ç–∞
   */
  async sendDiagnosticReport(
    report: DiagnosticReport,
    config: ReportConfig
  ): Promise<ApiResponse> {
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞
      const message = this.formatDiagnosticReport(report, config.includeDetails);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const result = await this.client.sendMessage({
        chatId: config.recipientPhone,
        message
      });

      // –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç —Ñ–∞–π–ª–æ–º
      if (config.sendAsFile && config.includeDetails) {
        const fileContent = this.generateReportFile(report);
        await this.client.sendFileByUpload({
          chatId: config.recipientPhone,
          file: Buffer.from(fileContent),
          fileName: `diagnostic_report_${Date.now()}.txt`,
          caption: '–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏'
        });
      }

      return result;
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Failed to send report'
      };
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  private formatDiagnosticReport(
    report: DiagnosticReport,
    includeDetails = false
  ): string {
    let message = `üìä *–û—Ç—á—ë—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏*\n\n`;
    message += `üïê –í—Ä–µ–º—è: ${report.timestamp}\n`;

    if (report.vehicleId) {
      message += `üöó ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è: ${report.vehicleId}\n`;
    }

    if (report.vin) {
      message += `üî¢ VIN: ${report.vin}\n`;
    }

    message += `\n${report.summary}\n`;

    if (includeDetails && report.diagnosticCodes && report.diagnosticCodes.length > 0) {
      message += `\n‚ö†Ô∏è *–ö–æ–¥—ã –æ—à–∏–±–æ–∫:*\n`;
      report.diagnosticCodes.forEach(code => {
        message += `  ‚Ä¢ ${code}\n`;
      });
    }

    if (includeDetails && report.sensors) {
      message += `\nüì° *–ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤:*\n`;
      Object.entries(report.sensors).forEach(([key, value]) => {
        message += `  ‚Ä¢ ${key}: ${value}\n`;
      });
    }

    message += `\n‚úÖ –û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`;

    return message;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –æ—Ç—á—ë—Ç–∞
   */
  private generateReportFile(report: DiagnosticReport): string {
    let content = `–û–¢–ß–Å–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò\n`;
    content += `=================\n\n`;
    content += `–í—Ä–µ–º—è: ${report.timestamp}\n`;

    if (report.vehicleId) {
      content += `ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è: ${report.vehicleId}\n`;
    }

    if (report.vin) {
      content += `VIN: ${report.vin}\n`;
    }

    content += `\n–û–ü–ò–°–ê–ù–ò–ï:\n${report.summary}\n`;

    if (report.diagnosticCodes && report.diagnosticCodes.length > 0) {
      content += `\n–ö–û–î–´ –û–®–ò–ë–û–ö:\n`;
      report.diagnosticCodes.forEach((code, index) => {
        content += `${index + 1}. ${code}\n`;
      });
    }

    if (report.sensors) {
      content += `\n–ü–û–ö–ê–ó–ê–ù–ò–Ø –î–ê–¢–ß–ò–ö–û–í:\n`;
      Object.entries(report.sensors).forEach(([key, value]) => {
        content += `${key}: ${value}\n`;
      });
    }

    content += `\n---\n–û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: ${new Date().toISOString()}\n`;

    return content;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async sendNotification(
    recipientPhone: string,
    message: string
  ): Promise<ApiResponse> {
    return this.client.sendMessage({
      chatId: recipientPhone,
      message
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ —Å –ª–æ–∫–∞—Ü–∏–µ–π –∫–∏–æ—Å–∫–∞
   */
  async sendReportWithLocation(
    report: DiagnosticReport,
    config: ReportConfig,
    latitude: number,
    longitude: number,
    locationName?: string
  ): Promise<ApiResponse> {
    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç
    const messageResult = await this.sendDiagnosticReport(report, config);

    if (!messageResult.success) {
      return messageResult;
    }

    // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é
    return this.client.sendLocation({
      chatId: config.recipientPhone,
      latitude,
      longitude,
      nameLocation: locationName || '–ö–∏–æ—Å–∫ —Å–∞–º–æ–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è',
      address: '–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏'
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ API
   */
  getClient(): GreenApiClient {
    return this.client;
  }
}
