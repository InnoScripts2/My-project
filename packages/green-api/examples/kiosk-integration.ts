/**
 * –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Green API –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–∏–æ—Å–∫–∞
 * apps/kiosk-agent/src/reports/green-api-reporter.ts
 */

import { ReportSender, type DiagnosticReport } from '@selfservice/green-api';

export class GreenApiReporter {
  private reportSender: ReportSender;
  private recipientPhone: string;

  constructor() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const config = {
      idInstance: process.env.GREEN_API_INSTANCE_ID || '',
      apiTokenInstance: process.env.GREEN_API_TOKEN || '',
      apiUrl: process.env.GREEN_API_URL || 'https://1105.api.green-api.com'
    };

    this.reportSender = new ReportSender(config);
    this.recipientPhone = process.env.GREEN_API_RECIPIENT_PHONE || '79963153818@c.us';
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
   */
  async sendDiagnosticComplete(
    vehicleData: {
      vin?: string;
      dtcCodes: string[];
      sensorData: Record<string, any>;
    }
  ): Promise<void> {
    const report: DiagnosticReport = {
      timestamp: new Date().toISOString(),
      vin: vehicleData.vin,
      diagnosticCodes: vehicleData.dtcCodes,
      sensors: vehicleData.sensorData,
      summary: this.generateSummary(vehicleData.dtcCodes)
    };

    const result = await this.reportSender.sendDiagnosticReport(report, {
      recipientPhone: this.recipientPhone,
      includeDetails: true,
      sendAsFile: vehicleData.dtcCodes.length > 5 // –§–∞–π–ª –µ—Å–ª–∏ –º–Ω–æ–≥–æ –∫–æ–¥–æ–≤
    });

    if (!result.success) {
      console.error('Failed to send diagnostic report:', result.error);
      throw new Error(`Report sending failed: ${result.error}`);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
   */
  async sendErrorNotification(error: string): Promise<void> {
    const message = `‚ö†Ô∏è *–û—à–∏–±–∫–∞ –≤ –∫–∏–æ—Å–∫–µ*\n\n${error}\n\n–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;

    const result = await this.reportSender.sendNotification(
      this.recipientPhone,
      message
    );

    if (!result.success) {
      console.error('Failed to send error notification:', result.error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –¥–µ–Ω—å
   */
  async sendDailyStats(stats: {
    totalDiagnostics: number;
    successfulDiagnostics: number;
    failedDiagnostics: number;
    revenue: number;
  }): Promise<void> {
    const message = `üìä *–î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n` +
      `üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}\n\n` +
      `‚úÖ –í—Å–µ–≥–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫: ${stats.totalDiagnostics}\n` +
      `‚úì –£—Å–ø–µ—à–Ω—ã—Ö: ${stats.successfulDiagnostics}\n` +
      `‚úó –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${stats.failedDiagnostics}\n` +
      `üí∞ –í—ã—Ä—É—á–∫–∞: ${stats.revenue.toFixed(2)} ‚ÇΩ\n\n` +
      `–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${((stats.successfulDiagnostics / stats.totalDiagnostics) * 100).toFixed(1)}%`;

    const result = await this.reportSender.sendNotification(
      this.recipientPhone,
      message
    );

    if (!result.success) {
      console.error('Failed to send daily stats:', result.error);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ –∫–æ–¥–∞–º –æ—à–∏–±–æ–∫
   */
  private generateSummary(dtcCodes: string[]): string {
    if (dtcCodes.length === 0) {
      return '‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.';
    } else if (dtcCodes.length === 1) {
      return `‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ 1 –æ—à–∏–±–∫–∞: ${dtcCodes[0]}`;
    } else {
      return `‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫: ${dtcCodes.length}. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ.`;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton –∏–Ω—Å—Ç–∞–Ω—Å–∞
export const greenApiReporter = new GreenApiReporter();
